package com.foodtech.back.entity.model;

import com.foodtech.back.entity.AbstractBaseEntity;
import com.foodtech.back.entity.payment.PaymentType;
import com.foodtech.back.entity.payment.BankCard;
import com.foodtech.back.entity.payment.cloud.CloudPayment;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;

import javax.persistence.*;
import java.time.LocalDateTime;
import java.util.List;

@Entity
@Table(name = "tb_order")
@Data
@NoArgsConstructor
@EqualsAndHashCode(callSuper = false, onlyExplicitlyIncluded = true)
public class Order extends AbstractBaseEntity {

    @Id
    @EqualsAndHashCode.Include
    private Long id; //not autogenerated

    private String iikoOrderId;

    private String iikoShortId; // короткий, не уникальный номер заказа (отображается в iiko front)

    @Enumerated(EnumType.STRING)
    private OrderStatus status;

    private Integer productsCost; // полная цена продуктов в заказе

    private Integer totalCost; // финальная цена с учетом бонусов

    private Integer appliedBonusAmount; // кол-во примененных бонусов

    private String statusQueueName; // очередь для отслеживания статуса в рэббите

    private boolean cutlery; // нужны ли столовые приборы

    private boolean checkStatus; // флаг, указывающий на необходимость проверки статуса в iiko

    private boolean inProcessing; // флаг, указывающий на то, что заказ находится в процессе исполнения с точки зрения фронта

    private LocalDateTime paidTime; // время, когда заказ был оплачен

    private Integer deliveryTime; // время, за которое заказ должен быть доставлен "в идеале"

    private String iikoProblem; // проблема, возникшая при регистрации заказа в системе iiko

    @ManyToOne(fetch = FetchType.LAZY)
    private User user;

    @ManyToOne(fetch = FetchType.LAZY)
    private Address address;

    @OneToMany(mappedBy = "order", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
    private List<OrderItem> items;

    private CloudPayment cloudPayment;

    @Enumerated(EnumType.STRING)
    private PaymentType paymentType;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "bank_card_id")
    private BankCard bankCard;

    @Override
    public String toString() {
        return id.toString();
    }
}
